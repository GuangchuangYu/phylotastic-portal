<% provide(:title, "Tree viewer") %>

<div class="col-md-3">
  <%= link_to "View tree report", root_path, class: "btn btn-default btn-block" %>
  <%= link_to "Add to my Gallery", root_path, class: "btn btn-default btn-block" %>
  
  <!-- Button trigger modal -->
  <button type="button" class="btn btn-default btn-block" data-toggle="modal" data-target="#show-tree-format">
    Show Newick format
  </button>
  
  <% if @tree.user == current_user %>
    <%= link_to "Save tree view", "#", class: "btn btn-default btn-block", id: "save-to-server" %>
  <% end %>
  
  <%= link_to "Save tree to disk", "#", class: "btn btn-default btn-block", id: "save-to-disk" %>
  
  <% if @tree.image.exists? %>
    <!-- Button trigger modal -->
    <button type="button" class="btn btn-default btn-block" data-toggle="modal" data-target="#show-tree-image">
      <%= image_tag @tree.image.url(:thumb) %>
    </button>
  <% end %>
</div>

<div class="col-md-9">
  <div id="tree-in-newick"></div>
  <div id='graph'></div>
  <div id='svgdataurl' class="hidden"></div>
  <canvas class="hidden"></canvas>
  <div class="fb-like" data-href="<%= request.original_url %>" data-layout="standard" data-action="like" data-show-faces="true" data-share="true"></div>
</div>

<!-- Modal -->
<div class="modal fade" id="show-tree-format" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
  <div class="modal-dialog modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title" id="myModalLabel"><button type="button" class="btn btn-default" data-toggle="tooltip" data-placement="top" title="Copy to clipboard" id="copy-to-clipboard">Copy</button></h4>
      </div>
      <div class="modal-body">
        <div style="word-break: break-all;" id="tree-in-string-format"><%= JSON.parse(@tree.representation)['newick'] %></div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<!-- Modal -->
<div class="modal fade" id="show-tree-image" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
  <div class="modal-dialog modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title" id="myModalLabel"></h4>
      </div>
      <div class="modal-body center">
        <%= image_tag @tree.image.url, width: "100%" %>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>
<script type="text/javascript">
 
$(document).ready(function(){

  var newick = Newick.parse("<%= JSON.parse(@tree.representation)['newick'] %>")
  
  var canvasWidth = 800, canvasHeight = 600;
  var newWidth = 0, newHeight = 0;
  var m = [10, 20, 10, 20],
      w = canvasWidth - m[1] - m[3],
      h = canvasHeight - m[0] - m[2],
      i = 0,
      root;

  var tree = d3.layout.tree()
      .size([h, w]);

  var diagonal = d3.svg.diagonal()
      .projection(function(d) { return [d.y, d.x]; });
  
  root = newick;
  root.x0 = h/2;
  root.y0 = 0;

  function toggleAll(d) {
    if (d.children) {
      d.children.forEach(toggleAll);
      toggle(d);
    }
  }

  // Initialize the display to show a few nodes.
  root.children.forEach(toggleAll);
  update(root);

  // d3.json("http://mbostock.github.io/d3/talk/20111018/flare.json", function(json) {
  //   console.log(json);
  //   root = json
  //   root.x0 = h / 2;
  //   root.y0 = 0;
  //
  //   function toggleAll(d) {
  //     if (d.children) {
  //       d.children.forEach(toggleAll);
  //       toggle(d);
  //     }
  //   }
  //
  //   // Initialize the display to show a few nodes.
  //   root.children.forEach(toggleAll);
  //   toggle(root.children[1]);
  //   toggle(root.children[1].children[2]);
  //   toggle(root.children[9]);
  //   toggle(root.children[9].children[0]);
  //
  //   update(root);
  // });

  function update(source) {
    var duration = d3.event && d3.event.altKey ? 5000 : 500;

    // compute the new height
    var levelWidth = [1];
    var childCount = function(level, n) {
      if(n.children && n.children.length > 0) {
        if(levelWidth.length <= level + 1) levelWidth.push(0);      
        levelWidth[level+1] += n.children.length;
        n.children.forEach(function(d) {
          childCount(level + 1, d);
        });
      }
    };
    console.log(levelWidth);
    
    childCount(0, root);  

    newHeight = d3.max(levelWidth) * 60; // 60 pixels per line    
    newWidth  = levelWidth.length * 180; // 180 pixels per child level
    tree = tree.size([newHeight, newWidth]);

    $("svg").remove();//TO REMOVE THE ALREADY SVG CONTENTS AND RELOAD ON EVERY UPDATE
    
    vis = d3.select("#graph").append("svg:svg")
        .attr("width", newWidth + m[1] + m[3])
        .attr("height", newHeight + m[0] + m[2])
        .append("svg:g")
        .attr("transform", "translate(" + m[3] + "," + m[0] + ")");
    
    // Compute the new tree layout.
    var nodes = tree.nodes(root).reverse();

    // Normalize for fixed-depth.
    nodes.forEach(function(d) { d.y = d.depth * 180; });

    // Update the nodes…
    var node = vis.selectAll("g.node")
        .data(nodes, function(d) { return d.id || (d.id = ++i); });

    // Enter any new nodes at the parent's previous position.
    var nodeEnter = node.enter().append("svg:g")
        .attr("class", "node")
        .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
        .on("click", function(d) { toggle(d); update(d); });

    nodeEnter.append("svg:circle")
        .attr("r", 1e-6)
        .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; })
        .style("stroke", "steelblue")
        .style("fill", "#fff")
        .style("stroke-width", "1.5px");
        
    nodeEnter.append("svg:text")
        .attr("x", function(d) { return d.children || d._children ? -10 : 10; })
        .attr("dy", ".35em")
        .attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })
        .text(function(d) { return d.name.replace(/_ott\d*/, ''); })
        .style("fill-opacity", 1e-6)
        .style("font-size", "11px");

    // Transition nodes to their new position.
    var nodeUpdate = node.transition()
        .duration(duration)
        .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });

    nodeUpdate.select("circle")
        .attr("r", 4.5)
        .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

    nodeUpdate.select("text")
        .style("fill-opacity", 1);

    // Transition exiting nodes to the parent's new position.
    var nodeExit = node.exit().transition()
        .duration(duration)
        .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
        .remove();

    nodeExit.select("circle")
        .attr("r", 1e-6);

    nodeExit.select("text")
        .style("fill-opacity", 1e-6);

    // Update the links…
    var link = vis.selectAll("path.link")
        .data(tree.links(nodes), function(d) { return d.target.id; });
        
    // Enter any new links at the parent's previous position.
    link.enter().insert("svg:path", "g")
        .attr("class", "link")
        .attr("d", function(d) {
          var o = {x: source.x0, y: source.y0};
          return diagonal({source: o, target: o});
        })
        .attr("fill", "none")
        .attr("stroke", "#ccc")
        .attr("stroke-width", "1.5px")
      .transition()
        .duration(duration)
        .attr("d", diagonal);

    // Transition links to their new position.
    link.transition()
        .duration(duration)
        .attr("d", diagonal);

    // Transition exiting nodes to the parent's new position.
    link.exit().transition()
        .duration(duration)
        .attr("d", function(d) {
          var o = {x: source.x, y: source.y};
          return diagonal({source: o, target: o});
        })
        .remove();

    // Stash the old positions for transition.
    nodes.forEach(function(d) {
      d.x0 = d.x;
      d.y0 = d.y;
    });
  }

  // Toggle children.
  function toggle(d) {
    if (d.children) {
      d._children = d.children;
      d.children = null;
    } else {
      d.children = d._children;
      d._children = null;
    }
  }

  // save tree image to disk
  d3.select("#save-to-disk").on("click", function(){
    var html = d3.select("svg")
          .attr("version", 1.1)
          .attr("xmlns", "http://www.w3.org/2000/svg")
          .node().parentNode.innerHTML;

    // console.log(html);
    var imgsrc = 'data:image/svg+xml;base64,'+ btoa(html);
    var img = '<img src="'+imgsrc+'">'; 
    d3.select("#svgdataurl").html(img);


    var canvas = document.querySelector("canvas"), context = canvas.getContext("2d");
    canvas.width = newWidth;
    canvas.height = newHeight;
    
    var image = new Image;
    image.src = imgsrc;
    image.onload = function() {
  	  context.drawImage(image, 0, 0);

      var canvasdata = canvas.toDataURL("image/png");
      var pngimg = '<img src="'+canvasdata+'">';
              d3.select("#pngdataurl").html(pngimg);

      var a = document.createElement("a");
      a.download = "sample.png";
      a.href = canvasdata;
      a.click();
    };

  });
  
  // Save tree image to server
  $("#save-to-server").click(function() {
    $(this).html("<span class='glyphicon glyphicon-refresh glyphicon-refresh-animate'></span>");
    var html = d3.select("svg")
            .attr("version", 1.1)
            .attr("xmlns", "http://www.w3.org/2000/svg")
            .node().parentNode.innerHTML;

    // console.log(html);
    var imgsrc = 'data:image/svg+xml;base64,'+ btoa(html);
    var img = '<img src="'+imgsrc+'">'; 
    d3.select("#svgdataurl").html(img);  
    var canvas = document.querySelector("canvas"), context = canvas.getContext("2d");
    canvas.width = newWidth;
    canvas.height = newHeight;
    
    var image = new Image;
    image.src = imgsrc;
	  context.drawImage(image, 0, 0);

    var canvasdata = canvas.toDataURL("image/png"); 
    
    // Get our file
    var file= dataURLtoBlob(canvasdata);
    // Create new form data
    var fd = new FormData();
    // Append our Canvas image file to the form data
    fd.append("tree[image]", file);
    // And send it
    $.ajax({
       url: "/trees/<%= @tree.id %>/update_image.js",
       type: "PATCH",
       data: fd,
       processData: false,
       contentType: false,
    });
  });
  
  function dataURLtoBlob(dataURL) {
    // Decode the dataURL    
    var binary = atob(dataURL.split(',')[1]);
    // Create 8-bit unsigned array
    var array = [];
    for(var i = 0; i < binary.length; i++) {
        array.push(binary.charCodeAt(i));
    }
    // Return our Blob object
    return new Blob([new Uint8Array(array)], {type: 'image/png'});
  }
  
  $("#copy-to-clipboard").mouseup(function(e){
  	e.preventDefault();
  });

  // Copy to clipboard button
  $("#copy-to-clipboard").click(function () {
    var $temp = $("<input type='text' />");
    $("body").append($temp);
    $temp.val($("#tree-in-string-format").text()).select();
    
    var result = false;
    try {
      result = document.execCommand("copy");
    } catch (err) {
      console.log("Copy error: " + err);
    }

    $temp.remove();
    console.log(result);
  });
  
  
});
</script>